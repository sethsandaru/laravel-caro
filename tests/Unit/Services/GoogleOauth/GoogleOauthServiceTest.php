<?php

namespace Tests\Unit\Services\GoogleOauth;

use App\Services\GoogleOauth\GoogleOauthService;
use App\Services\GoogleOauth\GoogleTokenResponse;
use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class GoogleOauthServiceTest extends TestCase
{
    protected GoogleOauthService $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Http::preventStrayRequests();

        $this->service = new GoogleOauthService(
            'fake-client-id',
            'fake-secret',
            'fake-redirect'
        );
    }

    public function testGetOauthTokenReturnsNullOnErrorApiCall()
    {
        Http::fake([
            GoogleOauthService::GET_OAUTH_TOKEN_ENDPOINT => Http::response(['error' => 'error'], 400),
        ]);

        $this->assertNull($this->service->getOauthToken('abc-xyz'));
    }

    public function testGetOauthTokenReturnsToken()
    {
        Http::fake([
            GoogleOauthService::GET_OAUTH_TOKEN_ENDPOINT => Http::response(['id_token' => 'hehe', 'access_token' => 'hihi']),
        ]);

        $token = $this->service->getOauthToken('abc-xyz');

        $this->assertNotNull($token);
        $this->assertSame('hehe', $token->idToken);
        $this->assertSame('hihi', $token->accessToken);
    }

    public function testGetUserInfoReturnsNullOnErrorApiCall()
    {
        Http::fake([
            GoogleOauthService::GET_USER_INFO_ENDPOINT . '?*' => Http::response(['error' => 'error'], 400),
        ]);

        $token = new GoogleTokenResponse('fake-id-token', 'fake-access-token');

        $this->assertNull($this->service->getUser($token));
    }

    public function testGetUserInfoReturnsUserInfoFromGoogle()
    {
        Http::fake([
            GoogleOauthService::GET_USER_INFO_ENDPOINT . '?*' => Http::response([
                'id' => 'fake-user-id',
                'email' => 'me@sethphat.com',
                'verified_email' => 'me@sethphat.com',
                'name' => 'Seth Phat',
                'given_name' => 'Seth',
                'family_name' => 'Phat',
                'picture' => 'https://this-is-a-fake-url.com/sethphat.jpg',
                'locale' => 'en-US',
            ]),
        ]);

        $token = new GoogleTokenResponse('fake-id-token', 'fake-access-token');

        $userInfo = $this->service->getUser($token);

        Http::assertSent(
            fn (Request $request) => $request->hasHeader('Authorization', 'Bearer fake-id-token')
                && $request['alt'] === 'json'
                && $request['access_token'] === 'fake-access-token'
        );

        $this->assertNotNull($userInfo);
        $this->assertSame('fake-user-id', $userInfo->id);
    }
}
