<?php

namespace Tests\Unit\Services\CaroLogic;

use App\Services\CaroLogic\CaroWinnerCalculator;
use PHPUnit\Framework\TestCase;

class CaroWinnerCalculatorTest extends TestCase
{
    protected CaroWinnerCalculator $caroWinnerCalculator;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->caroWinnerCalculator = new CaroWinnerCalculator();
    }

    public function testNoWinnerOn10x10Board()
    {
        $board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ];

        $winner = $this->caroWinnerCalculator->calculate($board);

        $this->assertSame(0, $winner);
    }

    public function testPlayer1WinsOnAStraightLine()
    {
        $board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0],
            [0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ];

        $winner = $this->caroWinnerCalculator->calculate($board);

        $this->assertSame(1, $winner);
    }

    public function testPlayer1WinsOnAStraightRowLine()
    {
        $board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0],
            [0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ];

        $winner = $this->caroWinnerCalculator->calculate($board);

        $this->assertSame(1, $winner);
    }

    public function testPlayer2WinsOnADiagonalsLineLeft()
    {
        $board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 2, 2, 2, 1, 0, 0],
            [0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ];

        $winner = $this->caroWinnerCalculator->calculate($board);

        $this->assertSame(2, $winner);
    }

    public function testPlayer2WinsOnADiagonalsLineRight()
    {
        $board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 2, 2, 2, 1, 0, 0],
            [0, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0],
            [0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ];

        $winner = $this->caroWinnerCalculator->calculate($board);

        $this->assertSame(2, $winner);
    }
}
